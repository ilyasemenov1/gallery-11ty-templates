const yaml = require('js-yaml')
const fs = require('fs')
const htmlMin = require('html-minifier-terser')
const markdown = require('markdown-it')({ html: true })
const esbuild = require('esbuild')
const lightningcss = require('lightningcss')
const path = require('path')
const Image = require('@11ty/eleventy-img')
const rss = require('@11ty/eleventy-plugin-rss')

const packageJson = require('./package.json')

module.exports = (config) => {

    // Collections

	const collections = {
		photos: 'src/photos/**/*/index.md',
		photos_2022: 'src/photos/2022/*/index.md',
		photos_2023: 'src/photos/2023/*/index.md',
		photos_2024: 'src/photos/2024/*/index.md',
		pages: 'src/pages/!(404)/index.njk',
	}
	
	let collectionsEntries = Object.entries(collections)
	collectionsEntries.forEach(element => {
		config.addCollection(element[0], (collectionApi) => {
			return collectionApi.getFilteredByGlob(collections[element[0]]);
		})
	})

    // Md

    config.addFilter('markdown', (value) => {
		return markdown.render(value);
	});

	config.addFilter('markdownInline', (value) => {
		return markdown.renderInline(value);
	});

	config.addFilter('markdownRemove', (value) => {
		return removeMarkdown(value);
	});

	config.setLibrary('md', markdown);

    // HTML Minify

	config.addTransform('html-minify', async (content, path) => {
		if (path && path.endsWith('.html')) {
			return await htmlMin.minify(content, {
				collapseBooleanAttributes: true,
				collapseWhitespace: true,
				decodeEntities: true,
				includeAutoGeneratedTags: false,
				removeComments: true,
			});
		}

		return content
	})

    // JS

	config.addTemplateFormats('js');

	config.addExtension('js', {
		outputFileExtension: 'js',
		compile: async (content, path) => {
			if (path !== './src/scripts/index.js') {
				return;
			}

			return async () => {
				let { outputFiles } = await esbuild.build({
					target: 'es2020',
					entryPoints: [path],
					minify: true,
					bundle: true,
					write: false,
				});

				return outputFiles[0].text;
			};
		},
	});

    //CSS

    const styles = [
		'./src/styles/index.css'
	];

	const processStyles = async (path) => {
		return await lightningcss.bundle({
			filename: path,
			minify: true,
			sourceMap: false,
			targets: lightningcss.browserslistToTargets(
				packageJson.browserslist,
			),
			include:
				lightningcss.Features.MediaQueries |
				lightningcss.Features.Nesting,
		});
	};

	config.addTemplateFormats('css');

	config.addExtension('css', {
		outputFileExtension: 'css',
		compile: async (content, path) => {
			if (!styles.includes(path)) {
				return;
			}

			return async () => {
				let { code } = await processStyles(path);

				return code;
			};
		},
	});

	// YAML

	config.addDataExtension('yml', (contents) => {
		return yaml.load(contents);
	});

    // Absolute links

	config.addFilter('absolute', (content, article) => {
		const reg = /(src="[^(https://)])|(src="\/)|(href="[^(https://)])|(href="\/)/g;
		const prefix = global.domain + article.url;
		return content.replace(reg, (match) => {
			if (match === 'src="/' || match === 'href="/') {
				match = match.slice(0, -1);
				return match + prefix;
			} else {
				return match.slice(0, -1) + prefix + match.slice(-1);
			}
		});
	});

	// Passthrough copy

	[
		'src/robots.txt',
		'src/images',
		'src/fonts',
		'src/photos/**/*.!(md|yml)',
		'src/svg'
	].forEach((path) => config.addPassthroughCopy(path));

	// Images

	const imageShortcode = async (
		src,
		alt,
		className = undefined,
		widths = [400, 800, 1280],
		formats = ['webp', 'jpeg'],
		sizes = '100vw'
	  ) => {
		const imageMetadata = await Image(src, {
		  widths: [...widths, null],
		  formats: [...formats, null],
		  outputDir: 'dist/**/*',
		  urlPath: '/images/**/*.{png,jpg,jpeg}',
		});
	  
		const imageAttributes = {
		  alt,
		  sizes,
		  loading: "lazy",
		  decoding: "async",
		};
	  
		return Image.generateHTML(imageMetadata, imageAttributes);
	  };
	  
	config.addShortcode('image', imageShortcode);

    return {
        dir: {
            input: 'src',
            output: 'dist',
            includes: 'includes',
			layouts: 'layouts',
			data: 'data'
        },
        dataTemplateEngine: 'njk',
		markdownTemplateEngine: 'njk',
		htmlTemplateEngine: 'njk',
		templateFormats: ['md', 'njk']
    }
}